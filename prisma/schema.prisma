// MERGE NOTE: This schema combines both your changes and the original repo's changes.
// It includes the new Flashcard and updated Note models from upstream,
// and your UserAnswer model and QuizQA difficulty field.

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id @default(uuid())
  username      String       @unique
  email         String       @unique
  mobile        String
  dob           String
  lastLogin     DateTime     @default(now())
  currentStreak Int          @default(0)
  topics        Topic[]
  notes         Note[]
  userAnswers   UserAnswer[] // Your addition
  level         Int          @default(1)
  experience    Int          @default(0)
}

model Topic {
  id        String     @id @default(uuid())
  userId    String
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  resources Resource[]
  note      Note?
}

enum ResourceType {
  ARTICLE
  VIDEO
  PDF
}

model Resource {
  id            String         @id @default(uuid())
  topicId       String
  title         String
  type          ResourceType
  url           String
  summary       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  topic         Topic          @relation(fields: [topicId], references: [id], onDelete: Cascade)
  quizzes       Quiz[]
  flashcardDeck FlashcardDeck?
}

model Quiz {
  id          String       @id @default(uuid())
  resourceId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resource    Resource     @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  quizQAs     QuizQA[]
  quizResults QuizResult[]
  userAnswers UserAnswer[] // Your addition
}

model QuizQA {
  id            String       @id @default(uuid())
  quizId        String
  question      String
  options       String[]
  correctAnswer String
  explanation   String?
  difficulty    String       @default("Medium") // Your addition
  userAnswers   UserAnswer[] // Your addition
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id             String   @id @default(uuid())
  quizId         String
  score          Int
  totalQuestions Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

// Your UserAnswer model
model UserAnswer {
  id             String   @id @default(uuid())
  userId         String
  quizId         String
  quizQAId       String
  selectedOption String
  isCorrect      Boolean
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz           Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizQA         QuizQA   @relation(fields: [quizQAId], references: [id], onDelete: Cascade)
}

// Models from original repo
model FlashcardDeck {
  id         String      @id @default(uuid())
  resourceId String      @unique
  title      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  resource   Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  cards      Flashcard[]
}

model Flashcard {
  id         String            @id @default(uuid())
  deckId     String
  term       String
  definition String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  deck       FlashcardDeck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  reviews    FlashcardReview[]
}

model FlashcardReview {
  id         String    @id @default(uuid())
  cardId     String
  difficulty Int // 1-5 scale (1=easy, 5=hard)
  nextReview DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  card       Flashcard @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model ContactQuery {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String?
  message   String
  createdAt DateTime @default(now())
}

model Note {
  id        String   @id @default(uuid())
  content   String?  @db.Text
  topicId   String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}